{"name":"yogajs","tagline":"Simple, prompt-driven scaffolding for continuously evolving boilerplates.","body":"# yoga\r\n\r\n[![npm version](https://img.shields.io/npm/v/generator-yoga.svg)](https://npmjs.org/package/generator-yoga) \r\n[![Build Status](https://travis-ci.org/metaraine/generator-yoga.svg)](https://travis-ci.org/metaraine/generator-yoga)\r\n\r\n**yoga** is a prompt-driven *scaffolding system* (boilerplate/starter-code generation). Its aim is to make it easier to create and maintain personal boilerplates that evolve over time.\r\n\r\nWhat makes **yoga** different?\r\n\r\n- 100% driven by command-line prompts (via [Inquirer](https://github.com/SBoudrias/Inquirer.js)).\r\n- The logic of copying files is in the filenames themselves, e.g. `{isGulp}gulpfile.js` or `{useSass}main.scss`.\r\n- Files are templated using [ejs](https://github.com/mde/ejs), extended with additional whitespace-friendly syntax for better readability (via [striate](https://github.com/metaraine/striate)).\r\n\r\n*(see [How it works](#how-it-works) below for details)*\r\n\r\nGenerators created by yoga are [yeoman](http://yeoman.io/) generators, so they can be published and consumed them like any other yeoman generator. You do not need to understand yeoman to use yoga, however, and you do not need to write any code to create and maintain your generator.\r\n\r\n## Usage\r\n\r\n### 1. Create your generator\r\n\r\n**yoga** requires npm, which comes with [node](https://nodejs.org/en/download/).\r\n\r\nYour initial generator is itself generated by yoga. You only need to do this once.\r\n\r\n```sh\r\n$ npm install -g yo                 # install yeoman\r\n$ npm install -g generator-yoga     # install yoga\r\n$ mkdir generator-mygen             # create a directory for your new generator\r\n$ cd generator-mygen            \r\n$ yo yoga                           # generate your personal generator\r\n$ npm link                          # alias your generator to your globally\r\n                                    # installed npm modules so that you can run\r\n                                    # it with yeoman.\r\n```\r\n\r\n### 2. Generate projects to your heart's content\r\n\r\nYay! Now you can run `yo mygen` in an empty directory to generate a new project.\r\n\r\n```sh\r\n$ yo mygen\r\n? Does your project use Javascript? Yes\r\n? Does your project use css? Yes\r\n...\r\n```\r\n\r\nAn initial **yoga** generator just consists of a blank README, so you have to customize it to generate something useful.\r\n\r\n#### Customizing your generator\r\n\r\nYou can customize your **yoga** generator without writing any generator code:\r\n\r\n- Drop files into `app/templates`. All files from this directory will be copied into your project directory when you run the generator.\r\n- Edit the [Inquirer](https://github.com/SBoudrias/Inquirer.js) prompts in `app/yoga.json`. These will determine which files get copied (via [prefixnotes](https://github.com/metaraine/prefixnote)) and what code gets copied (via [striate](https://github.com/metaraine/striate)).\r\n\r\nFor example, if you have a prompt in your yoga.json that inquires about Javascript being included in the project:\r\n\r\n```js\r\n{\r\n  prompts: [{\r\n    \"type\": \"confirm\",\r\n    \"name\": \"js\",\r\n    \"message\": \"Does your project use Javascript?\",\r\n    \"store\": true\r\n  }]\r\n}\r\n```\r\n\r\nAnd a file in `app/templates` which specifies the prompt `name` in a [prefixnote](https://github.com/metaraine/prefixnote):\r\n\r\n```\r\n.\r\n└── {js}main.js\r\n```\r\n\r\nThen when you run the generator, you will be prompted `Does your project use Javascript?`. If you choose yes, `main.js` will be copied into the project directory. If you choose no, it will not be copied.\r\n\r\nCheck out [generator-yoga-sample](https://github.com/metaraine/generator-yoga-sample) for an example yoga generator.\r\n\r\n## More detailed usage\r\n\r\n[Inquirer](https://github.com/SBoudrias/Inquirer.js) prompts drive everything in a yoga generator.\r\n\r\nSample yoga.json file:\r\n\r\n```js\r\n{\r\n  \"prompts\": [\r\n    {\r\n      \"type\": \"confirm\",\r\n      \"name\": \"js\",\r\n      \"message\": \"Does your project use Javascript?\",\r\n      \"store\": true\r\n    },\r\n    {\r\n      \"type\": \"confirm\",\r\n      \"name\": \"css\",\r\n      \"message\": \"Does your project use css?\",\r\n      \"store\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe above yoga.json file would prompt you with two questions every time you run your generator and store them in `js` and `css` variables. These variables drive the main two aspects of scaffolding: file copying and templating.\r\n\r\n### 1. File Copying\r\n\r\nYou can control which files in `/app/templates` get copied into your new project by prefixing filenames with expressions that include prompt variables.\r\n\r\n```\r\n.\r\n├── index.html\r\n├── {js}scripts\r\n│   └── main.js\r\n└── {css}styles\r\n    └── main.css\r\n```\r\n\r\nIn the above example, the scripts folder will only be copied if `js` (as declared in yoga.json) is true, and the `styles` folder will only be copied if `css` is true.\r\n\r\nSome notes about file copying:\r\n\r\n- Empty expressions are a great way to include system and hidden files in your templates folder without them having an effect until they are copied:\r\n  - `{}package.json`\r\n  - `{}.gitignore`\r\n- If a folder name only consists of an expression, all files will be copied to the parent folder:\r\n\r\n  ```\r\n  main.js\r\n  {js}\r\n    ├── 1.js\r\n    ├── 2.js\r\n    └── 3.js\r\n  ```\r\n\r\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;⇨\r\n\r\n  ```\r\n  main.js\r\n  1.js\r\n  2.js\r\n  3.js\r\n  ```\r\n\r\n- Expressions can be any boolean Javascript statement:\r\n\r\n  ```\r\n  {js && gulp}gulpfile.js\r\n  ```\r\n\r\nSee [prefixnote](https://github.com/metaraine/prefixnote) for the nitty-gritty.\r\n\r\n\r\n### 2. Templating\r\n\r\nYou can use [striate](https://github.com/metaraine/striate), a superset of [ejs](https://github.com/mde/ejs), to control which code gets generated within the files. The answers given to the prompts in yoga.json are available as variables within the scope of your template files.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  >> if(css) {\r\n  <link rel='Stylesheet' type='text/css' href='styles/main.css'>\r\n  >> }\r\n</head>\r\n<body>\r\n  >> if(js) {\r\n  <script src='scripts/main.js'></script>\r\n  >> }\r\n</body>\r\n</html>\r\n```\r\n\r\nYou can see a complete yoga generator with prompts, file prefixes, and templating at [generator-yoga-sample](https://github.com/metaraine/generator-yoga-sample).\r\n\r\n## License\r\n\r\nISC © [Raine Lourie](https://github.com/metaraine)\r\n","google":"UA-73230755-1","note":"Don't delete this file! It's used internally to help with page regeneration."}